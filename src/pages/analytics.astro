---
import Layout from "../layouts/Layout.astro";
import AnalyticsComponent from "../components/Analytics";
import { supabase } from "../lib/supabase";

const page = Number(Astro.url.searchParams.get("page")) || 1;
const per_page = 10;
const from = (page - 1) * per_page;
const to = from + per_page - 1;

if (Astro.request.method === "POST") {
  try {
    console.log("Peticion: ");

    const { count } = await supabase
      .from("quiz_results")
      .select("*", { count: "exact", head: true });

    const { data: results, error } = await supabase
      .from("quiz_results")
      .select("*")
      .order("created_at", { ascending: false })
      .range(from, to);
    console.log("results: ", results);
    console.log("count: ", count);
    console.log("error: ", error);

    if (error) throw error;

    return new Response(
      JSON.stringify({
        results,
        pagination: {
          total: count,
          page,
          per_page,
          total_pages: Math.ceil(count / per_page),
        },
      }),
      {
        status: 200,
        headers: { "Content-Type": "application/json" },
      }
    );
  } catch (error) {
    return new Response(
      JSON.stringify({ error: error.message || "Error fetching results" }),
      { status: 500 }
    );
  }
}

// Función para obtener todos los resultados paginados
async function fetchAllResults() {
  const batchSize = 1000;
  let allData = [];
  let hasMore = true;
  let currentPage = 0;
  const maxAttempts = 10; // Límite de seguridad
  let attempts = 0;

  const { count } = await supabase
    .from("quiz_results")
    .select("*", { count: "exact", head: true });

  if (!count) return [];

  const expectedPages = Math.ceil(count / batchSize);

  while (hasMore && attempts < maxAttempts && currentPage < expectedPages) {
    const { data, error } = await supabase
      .from("quiz_results")
      .select("*")
      .order("created_at", { ascending: false })
      .range(currentPage * batchSize, (currentPage + 1) * batchSize - 1);

    if (error) {
      console.error("Error fetching results:", error);
      break;
    }

    if (!data || data.length === 0) {
      hasMore = false;
    } else {
      allData = [...allData, ...data];
      if (data.length < batchSize) {
        hasMore = false;
      }
    }

    currentPage++;
    attempts++;
  }

  return allData;
}

// Obtener todos los resultados para los gráficos
const allResults = await fetchAllResults();

// Datos paginados para la tabla
const { data: initialResults, count } = await supabase
  .from("quiz_results")
  .select("*", { count: "exact" })
  .order("created_at", { ascending: false })
  .range(from, to);

console.log("allResults: ", allResults);
console.log("initialResults: ", initialResults);

const initialPagination = {
  total: count,
  page,
  per_page,
  total_pages: Math.ceil(count / per_page),
};
---

<Layout>
  <AnalyticsComponent
    initialResults={initialResults || []}
    initialPagination={initialPagination}
    allResults={allResults || []}
    client:load
  />
</Layout>
